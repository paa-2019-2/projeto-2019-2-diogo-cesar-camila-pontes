%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n : VAR nat

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

% This is the auxiliary function that calls bubbling addequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Last modification: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubbling_count(l:list[nat], count:nat, (n:below[l`length])) : RECURSIVE  [list[nat],nat] =
IF n = 0 THEN
	(l,count)
ELSIF car(l) > car(cdr(l)) THEN LET aux = bubbling_count(cons(car(l),cdr(cdr(l))), count, n-1) IN  
	(
		cons(
			car(cdr(l)), aux`1
		),
		aux`2 + 1
		
	)
ELSE LET aux = bubbling_count(cdr(l), count, n-1) IN
	(
		cons(
			car(l), aux`1
		),
		aux`2 + 1
	)
ENDIF
MEASURE n

bubblesort_aux_count(lc:[list[nat],nat], (n:below[lc`1`length])) : RECURSIVE [list[nat],nat] =
IF n = 0 THEN lc
ELSE bubblesort_aux_count(bubbling_count(lc`1,lc`2,n), n-1)
ENDIF
MEASURE n

bubblesort_count(l) : [list[nat],nat] = 
IF null?(l) THEN (l,0)
ELSE bubblesort_aux_count((l, 0), l`length-1)
ENDIF

bubblesort_is_quadratic: LEMMA
			 FORALL (l:list[nat]):
			 	member(LAMBDA(n:nat): bubblesort_count(l)`2, Omicron(LAMBDA(n:nat):length(l)^2 ))

bubbling_is_linear: LEMMA
		    FORALL (l:list[nat])(n:nat)(c:nat):
		    	   bubbling_count(l,c,n)`2 <= c + length(l)

END bubblesort

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015 (Original bubbling functions)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Projeto da disciplina Projeto e AnÃ¡lise de Algoritmos
%%% Camila F. T. Pontes
%%% Diogo C. Ferreira
%%% Last modification:  November 27 2019 (counting functions and lemmas)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n : VAR nat


%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLING (ORIGINAL)
%%%%%%%%%%%%%%%%%%%%%%%

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLING
%%% bubbling_count: is a copy of the bubbling function but with an additional
%%%                 parameter "count" which tracks the number of comparisons
%%%                 made by the algorithm, and is returned along the input
%%%                 list as a pair (l,count)
%%%
%%% bubbling_equiv: lemma of equivalence between bubbling and bubbling_count
%%%
%%% bubbling_length: lemma that states that bubbling_count does not change the
%%%                  input list length
%%%
%%% bubbling_counts_n: lemma that states that bubbling_count performs exactly
%%%                    n comparisons, and therefore has linear complexity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubbling_count(l:list[nat], count:nat, (n:below[l`length])) : RECURSIVE  [list[nat],nat] =
IF n = 0 THEN (l,count)
ELSIF car(l) > car(cdr(l)) THEN
      LET aux = bubbling_count(cons(car(l),cdr(cdr(l))), count, n-1) IN  
	(
		cons(car(cdr(l)), aux`1),
		1+aux`2
	)
ELSE LET aux = bubbling_count(cdr(l), count, n-1) IN
	(
		cons(car(l), aux`1),
		1+aux`2
	)
ENDIF
MEASURE n

bubbling_equiv: LEMMA
	FORALL (l:list[nat]) (n:below[l`length]) (c:nat):
		bubbling(l,n) = bubbling_count(l,c,n)`1

		bubbling_length: LEMMA
		 FORALL (l:list[nat], n:below[l`length]) (c:nat):
		 	length(bubbling_count(l,c,n)`1) = length(l)

bubbling_counts_n: LEMMA
	 	   FORALL (l:list[nat], n:below[l`length]) (c:nat):
		   	  bubbling_count(l, c, n)`2 = c + n


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLESORT AUX (ORIGINAL)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% This is the auxiliary function that calls bubbling addequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLING AUX
%%% bubblesort_aux_count: is a copy of the bubblesort_aux function but with an
%%%                       additional parameter "count" which tracks the number
%%%                       of comparisons returned by bubbling_count
%%%                       
%%% bubblesort_aux_equiv: lemma of equivalence between bubblesort_aux and
%%%                       bubblesort_aux_count
%%%                       
%%% bubaux_counts_n2: lemma that states that bubblesort_aux_count performs
%%%                   exactly (n*(n+1))/2 comparisons, and therefore has
%%%                   quadratic complexity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort_aux_count(l:list[nat], count:nat, (n:below[l`length])): RECURSIVE [list[nat],nat] =
IF n = 0 THEN (l,count)
ELSE LET aux = bubbling_count(l,count,n) IN bubblesort_aux_count(aux`1, aux`2, n-1)
ENDIF
MEASURE n


bubblesort_aux_equiv: LEMMA
	FORALL (l:list[nat], n:below[l`length]) (c:nat):
		bubblesort_aux(l,n) = bubblesort_aux_count(l,c,n)`1

bubaux_counts_n2: LEMMA
		  FORALL (l:list[nat], n:below[l`length]) (c:nat):
		  	 bubblesort_aux_count(l, c, n)`2 = c + ((n^2 + n) / 2)



%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLESORT (ORIGINAL)
%%%%%%%%%%%%%%%%%%%%%%%%%

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BUBBLESORT
%%% bubblesort_count: is a copy of the bubblesort function but also returns the
%%%                   number of comparisons made by the algorithm returned by
%%%                   bubblesort_aux
%%%                       
%%% bubblesort_equiv: lemma of equivalence between bubblesort and bubblesort
%%%                       
%%% bubblesort_counts_n2: lemma that states that bubblesort performs exactly
%%%                       (n*(n-1))/2 comparisons, where n is the length of the
%%%                       input list, and therefore has quadratic complexity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort_count(l) : [list[nat],nat] = 
IF null?(l) THEN (l,0)
ELSE bubblesort_aux_count(l, 0, l`length-1)
ENDIF


bubblesort_equiv: LEMMA
	FORALL (l:list[nat]):
		bubblesort(l) = bubblesort_count(l)`1


bubblesort_counts_n2: LEMMA
		  FORALL (l:list[nat]):
		  	 bubblesort_count(l)`2 = (length(l)^2 - length(l)) / 2 

END bubblesort

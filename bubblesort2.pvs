%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura
%%% Last modification:  April 28 2015
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort : THEORY
BEGIN

IMPORTING   sorting
IMPORTING complexity

l,l1,l2 : VAR list[nat]
i,j,k,n : VAR nat

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ l`length])) : RECURSIVE  list[nat] =
IF n = 0 THEN l
ELSIF car(l) > car(cdr(l)) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

% This is the auxiliary function that calls bubbling addequately
%t starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[l`length ] )) : RECURSIVE list[nat] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[nat] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, l`length - 1 )
ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% COUNTING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubbling_count(l:list[nat], count:nat, (n:below[l`length])) : RECURSIVE  [list[nat],nat] =
IF n = 0 THEN (l,count)
ELSIF car(l) > car(cdr(l)) THEN
      LET aux = bubbling_count(cons(car(l),cdr(cdr(l))), count, n-1) IN  
	(
		cons(car(cdr(l)), aux`1),
		1+aux`2
	)
ELSE LET aux = bubbling_count(cdr(l), count, n-1) IN
	(
		cons(car(l), aux`1),
		1+aux`2
	)
ENDIF
MEASURE n

bubblesort_aux_count(l:list[nat], count:nat, (n:below[l`length])): RECURSIVE [list[nat],nat] =
IF n = 0 THEN (l,count)
ELSE LET aux = bubbling_count(l,count,n) IN bubblesort_aux_count(aux`1, aux`2, n-1)
ENDIF
MEASURE n

bubblesort_count(l) : [list[nat],nat] = 
IF null?(l) THEN (l,0)
ELSE bubblesort_aux_count(l, 0, l`length-1)
ENDIF


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% EQUIV
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%insert_cinsert_equiv: LEMMA
%		      FORALL (x, n:nat) (l:list[nat]):
%		     	    insert(x,l) = cinsert(x, (l,n))`1

bubbling_equiv: LEMMA
	FORALL (l:list[nat]) (n:below[l`length]) (c:nat):
		bubbling(l,n) = bubbling_count(l,c,n)`1


bubblesort_aux_equiv: LEMMA
	FORALL (l:list[nat], n:below[l`length]) (c:nat):
		bubblesort_aux(l,n) = bubblesort_aux_count(l,c,n)`1


bubblesort_equiv: LEMMA
	FORALL (l:list[nat]):
		bubblesort(l) = bubblesort_count(l)`1


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% COMPLEXITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubbling_counts_n: LEMMA
	 	   FORALL (l:list[nat], n:below[l`length]) (c:nat):
		   	  bubbling_count(l, c, n)`2 = c + n

bubbling_linear: LEMMA
	 	 FORALL (l:list[nat], n:below[l`length]) (c:nat):
		 	bubbling_count(l, c, n)`2 <= c + length(l)

bubaux_counts_n2: LEMMA
		  FORALL (l:list[nat], n:below[l`length]) (c:nat):
		  	 bubblesort_aux_count(l, c, n)`2 = c + ((n*n - n) / 2)
%		  FORALL (l:list[nat] | NOT null?(l) ):
%		  bubblesort_aux_count(l, 0, length(l) - 1)`2 = (length(l) ^ 2 - length(l)) / 2

bubblesort_counts_n2: LEMMA
		  FORALL (l:list[nat]):
		  	 bubblesort_count(l)`2 = (length(l)^2 - length(l)) / 2 


%bubblesort_is_quadratic: LEMMA
%			 FORALL (l:list[nat]):
%			 	member(LAMBDA(n:nat): bubblesort_count(l)`2, Omicron(LAMBDA(n:nat):length(l)^2 %))

%bubbling_is_linear: LEMMA
%		    FORALL (l:list[nat]) (n:below[l`length]) (c:nat):
%		    	   bubbling_count(l,c,n)`2 <= c + length(l)
%

%bubbling_aux_is_quadratic: LEMMA
%			   FORALL (lc:[list[nat],nat]) (n:below[lc`1`length]):
%			   	  bubblesort_aux_count(lc,n)`2 <= lc`2 + length(lc`1)^2

END bubblesort
